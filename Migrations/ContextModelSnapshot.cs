// <auto-generated />
using GestionOffers.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GestionOffer.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GestionOffer.Models.Bidder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("domaine")
                        .IsRequired();

                    b.Property<string>("email")
                        .IsRequired();

                    b.Property<string>("fax")
                        .IsRequired();

                    b.Property<string>("firstName")
                        .IsRequired();

                    b.Property<string>("lastName")
                        .IsRequired();

                    b.Property<int>("tel");

                    b.Property<string>("typeEnterprise")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Bidder");
                });

            modelBuilder.Entity("GestionOffer.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired();

                    b.Property<string>("libelle")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Categorie");
                });

            modelBuilder.Entity("GestionOffer.Models.Commission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired();

                    b.Property<string>("libelle")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Commission");
                });

            modelBuilder.Entity("GestionOffer.Models.Contract", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code");

                    b.Property<DateTime?>("dateContract");

                    b.Property<int?>("depouilleId");

                    b.Property<string>("name");

                    b.Property<string>("payment");

                    b.HasKey("Id");

                    b.HasIndex("depouilleId")
                        .IsUnique()
                        .HasFilter("[depouilleId] IS NOT NULL");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("GestionOffer.Models.Depouillement", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("comment");

                    b.Property<DateTime?>("dateDepouille");

                    b.Property<byte?>("noteFinance");

                    b.Property<byte?>("noteTechnical");

                    b.Property<int?>("plisId");

                    b.Property<string>("transCript");

                    b.HasKey("Id");

                    b.HasIndex("plisId")
                        .IsUnique()
                        .HasFilter("[plisId] IS NOT NULL");

                    b.ToTable("Depouillement");
                });

            modelBuilder.Entity("GestionOffer.Models.Diffusion", b =>
                {
                    b.Property<int>("offerId");

                    b.Property<int>("bidderId");

                    b.HasKey("offerId", "bidderId");

                    b.HasIndex("bidderId");

                    b.ToTable("Diffusion");
                });

            modelBuilder.Entity("GestionOffer.Models.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("code")
                        .IsRequired();

                    b.Property<string>("libelle")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("GestionOffer.Models.Member", b =>
                {
                    b.Property<int>("commissionId");

                    b.Property<int>("userId");

                    b.HasKey("commissionId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("GestionOffer.Models.PieceOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("dateCreation");

                    b.Property<string>("name")
                        .IsRequired();

                    b.Property<int>("offerId");

                    b.Property<string>("pathFile")
                        .IsRequired();

                    b.Property<string>("type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("offerId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("GestionOffer.Models.Plis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("bidderId");

                    b.Property<string>("code")
                        .IsRequired();

                    b.Property<DateTime>("dateDepot");

                    b.Property<string>("libelle")
                        .IsRequired();

                    b.Property<int>("offerId");

                    b.Property<string>("typeDepot")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("bidderId");

                    b.HasIndex("offerId");

                    b.ToTable("Plis");
                });

            modelBuilder.Entity("GestionOffer.Models.Provider", b =>
                {
                    b.Property<int?>("ProviderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("domaine")
                        .IsRequired();

                    b.Property<string>("fax")
                        .IsRequired();

                    b.Property<string>("typeEnterprise")
                        .IsRequired();

                    b.HasKey("ProviderId");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("GestionOffers.Models.Address", b =>
                {
                    b.Property<int?>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("bidderId");

                    b.Property<string>("city")
                        .IsRequired();

                    b.Property<string>("country")
                        .IsRequired();

                    b.Property<string>("region")
                        .IsRequired();

                    b.Property<string>("street")
                        .IsRequired();

                    b.Property<int>("zip");

                    b.HasKey("AddressId");

                    b.HasIndex("bidderId")
                        .IsUnique()
                        .HasFilter("[bidderId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("GestionOffers.Models.Offer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("categorieId");

                    b.Property<string>("code")
                        .IsRequired();

                    b.Property<int?>("commissionId");

                    b.Property<DateTime>("dateCreation");

                    b.Property<DateTime>("dateLimit");

                    b.Property<DateTime>("dateOpened");

                    b.Property<string>("description")
                        .IsRequired();

                    b.Property<int>("directionId");

                    b.Property<string>("etat")
                        .IsRequired();

                    b.Property<string>("intitule")
                        .IsRequired();

                    b.Property<string>("manager");

                    b.Property<string>("placeDepot")
                        .IsRequired();

                    b.Property<string>("placeOpened")
                        .IsRequired();

                    b.Property<bool>("publish");

                    b.HasKey("id");

                    b.HasIndex("categorieId");

                    b.HasIndex("commissionId");

                    b.HasIndex("directionId");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("GestionOffers.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<int?>("ProviderId");

                    b.Property<DateTime>("date");

                    b.Property<string>("firstName")
                        .IsRequired();

                    b.Property<string>("lastName")
                        .IsRequired();

                    b.Property<string>("mail")
                        .IsRequired();

                    b.Property<int>("numberTel");

                    b.Property<string>("password")
                        .IsRequired();

                    b.Property<int>("type");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProviderId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GestionOffer.Models.Contract", b =>
                {
                    b.HasOne("GestionOffer.Models.Depouillement", "depouille")
                        .WithOne("contract")
                        .HasForeignKey("GestionOffer.Models.Contract", "depouilleId");
                });

            modelBuilder.Entity("GestionOffer.Models.Depouillement", b =>
                {
                    b.HasOne("GestionOffer.Models.Plis", "plis")
                        .WithOne("depouillement")
                        .HasForeignKey("GestionOffer.Models.Depouillement", "plisId");
                });

            modelBuilder.Entity("GestionOffer.Models.Diffusion", b =>
                {
                    b.HasOne("GestionOffer.Models.Bidder", "bidder")
                        .WithMany("diffusion")
                        .HasForeignKey("bidderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GestionOffers.Models.Offer", "offer")
                        .WithMany("diffusOffer")
                        .HasForeignKey("offerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionOffer.Models.Member", b =>
                {
                    b.HasOne("GestionOffer.Models.Commission", "commission")
                        .WithMany("memberCommis")
                        .HasForeignKey("commissionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GestionOffers.Models.User", "user")
                        .WithMany("member")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionOffer.Models.PieceOffer", b =>
                {
                    b.HasOne("GestionOffers.Models.Offer", "offer")
                        .WithMany("documents")
                        .HasForeignKey("offerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionOffer.Models.Plis", b =>
                {
                    b.HasOne("GestionOffer.Models.Bidder", "bidder")
                        .WithMany("plis")
                        .HasForeignKey("bidderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GestionOffers.Models.Offer", "offer")
                        .WithMany("plis")
                        .HasForeignKey("offerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionOffers.Models.Address", b =>
                {
                    b.HasOne("GestionOffer.Models.Bidder", "bidder")
                        .WithOne("address")
                        .HasForeignKey("GestionOffers.Models.Address", "bidderId");
                });

            modelBuilder.Entity("GestionOffers.Models.Offer", b =>
                {
                    b.HasOne("GestionOffer.Models.Categorie", "categorie")
                        .WithMany("Offers")
                        .HasForeignKey("categorieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GestionOffer.Models.Commission", "commission")
                        .WithMany("offers")
                        .HasForeignKey("commissionId");

                    b.HasOne("GestionOffer.Models.Direction", "direction")
                        .WithMany("DirectOffers")
                        .HasForeignKey("directionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GestionOffers.Models.User", b =>
                {
                    b.HasOne("GestionOffers.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GestionOffer.Models.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");
                });
#pragma warning restore 612, 618
        }
    }
}
